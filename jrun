#!/bin/bash -f
# -*- c-basic-offset: 4; indent-tabs-mode: nil -*-

#  "jrun" - Link Java programs like C and run them
#  Copyright (C) 2005,2014,2015,2017  Steven Simpson
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  Contact Steven Simpson <https://github.com/simpsonst>

cmd=java

function find_lib () {
    local dir="$1" ; shift
    local root="$1" ; shift
    local reqver="$1" ; shift

    if [ -n "$reqver" ] ; then
        # The major version must match, so extract it.
        local minor="${reqver#*.}"
        if [ "$minor" == "$reqver" ] ; then
            unset minor
            local major="$reqver"
        else
            local major="${reqver%%.*}"
        fi
        local cands=()
    else
        local reqver=0
        local major
        unset major
        local minor

        local cands=("$dir/$root.jar" "$dir/$root.zip" "$dir/$root")
    fi

    # Find all matching files.
    cands=("${cands[@]}" \
        "$dir/$root${major:+-"$major"}"*.jar \
        "$dir/$root${major:+-"$major"}"*.zip)

#    printf > "/dev/stderr" "Candidate %s\n" "${cands[@]}"
    if [ "$cands" == "$dir/$root${major:+-"$major"}*" ] ; then
        return 1
    fi

    # Find the best one.
    local best=""
    local bestver="$reqver"
    local cand
    local ver
    local suffix
    local name
    for cand in "${cands[@]}" ; do
        # Skip unreadable items.
        if [ ! -r "$cand" ] ; then continue ; fi

        if [ -f "$cand" ] ; then
            # A file must end in .jar.
            suffix="${cand##*.}"
            if [ "$suffix" != "jar" -a "$suffix" != "zip" ] ; then
                continue
            fi
            name="${cand%.*}"
        elif [ ! -d "$cand" ] ; then
            continue
        else
            name="$cand"
        fi

        # Strip off the directory and root.
        ver="${name#"$dir/$root-"}"
        if [ "$ver" == "$name" ] ; then
            best="$cand"
            break
        fi
        if [ -z "$ver" ] ; then ver=0 ; fi

        if [ -z "$best" ] ; then
            best="$cand"
            bestver="$ver"
        elif cmp_vers "$ver" "$bestver" ; then
            continue
        else
            best="$cand"
            bestver="$ver"
        fi
    done

    if cmp_vers "$reqver" "$bestver" ; then
        printf "$best"
    fi
}

function cmp_subvers () {
    local lh="$1" ; shift
    local rh="$1" ; shift
    local lhh rhh exp

    ## Strip off identical components.
    exp='n'
    while
        case "$exp" in
            (n)
                ## Expect numerics.
                [[ "$lh" =~ ^([0-9]*)(.*)$ ]]
                lhh="${BASH_REMATCH[1]}"
                lh="${BASH_REMATCH[2]}"
                [[ "$rh" =~ ^([0-9]*)(.*)$ ]]
                rhh="${BASH_REMATCH[1]}"
                rh="${BASH_REMATCH[2]}"
                exp='t'

                test "${lhh:-0}" -eq "${rhh:-0}"
                ;;

            (t)
                ## Expect text.
                [[ "$lh" =~ ^([^0-9]*)(.*)$ ]]
                lhh="${BASH_REMATCH[1]}"
                lh="${BASH_REMATCH[2]}"
                [[ "$rh" =~ ^([^0-9]*)(.*)$ ]]
                rhh="${BASH_REMATCH[1]}"
                rh="${BASH_REMATCH[2]}"
                exp='n'

                test -n "$lhh" -a "$lhh" = "$rhh"
                ;;
        esac
    do true ; done

    case "$exp" in
        (t)
            if [ "${rhh:-0}" -gt "${lhh:-0}" ] ; then
                return 1
            elif [ "${rhh:-0}" -lt "${lhh:-0}" ] ; then
                return 2
            else
                return 0
            fi
            ;;
        (n)
            if [ "$rhh" \> "$lhh" ] ; then
                test -z "$lhh" && return 2
                return 1
            elif [ "$rhh" \< "$lhh" ] ; then
                test -z "$rhh" && return 1
                return 2
            else
                return 0
            fi
            ;;
    esac
}

function cmp_vers () {
    local left="${1,,}" ; shift
    local right="${1,,}" ; shift
    local lh rh rc

    while
        ## Extract the heads.
        lh="${left%%.*}"
        rh="${right%%.*}"
        test -n "$lh" -a -n "$rh"
    do
        ## Remove heads so we're left with the tails.
        left="${left#"$lh"}"
        left="${left#.}"
        right="${right#"$rh"}"
        right="${right#.}"

        cmp_subvers "$lh" "$rh"
        rc=$?
        test $rc -eq 0 && continue
        test $rc -lt 2
        return $?
    done

    cmp_subvers "$lh" "$rh"
    rc=$?
    test $rc -lt 2
}

while test $# -gt 0
do
    case "$1" in
        -h)
            cat << EOF > "/dev/stderr"

Usage: $0 [-c cmd] [-L dir]* [-l lib]* [-a lib]* args
Run the command cmd (default "java") with the given args, having set
up CLASSPATH to include lib.jar, lib.zip or lib/ in the directories
dir (appended to CLASSDIRS).  For jars and zips, -l lib:A.B.C
specifies a minimum version number, with A matching exactly.  -a lib
adds an item to PROCPATH.

Usage: $0 [-L dir]* [-l lib]* [-a lib]* -p
Display the computed CLASSPATH.

Usage: $0 [-L dir]* [-l lib]* [-a lib]* -e
Print CLASSPATH and PROCPATH, if defined, as environment variables.

Usage: $0 [-L dir]* [-l lib]* [-a lib]* -r
Print CLASSPATH and PROCPATH, as if javac arguments.

EOF
            exit
            ;;
        -c)
            shift
            cmd="$1"
            ;;


        -p)
            printf "%s\n" "$CLASSPATH"
            exit
            ;;

        -e)
            [ -n "$CLASSPATH" ] && printf "CLASSPATH=\047%s\047\n" "$CLASSPATH"
            [ -n "$PROCPATH" ] && printf "PROCPATH=\047%s\047\n" "$PROCPATH"
            exit
            ;;

        -r)
            [ -n "$CLASSPATH" ] && printf " -classpath \047%s\047" "$CLASSPATH"
            [ -n "$PROCPATH" ] && \
                printf " -processorpath \047%s\047" "$PROCPATH"
            exit
            ;;


        -l*)
            LIB="${1:2}"
            if [ "$LIB" == "" ]
            then
                shift
                LIB="$1"
            fi

            version="${LIB#*:}"
            if [ "$version" == "$LIB" ] ; then
                unset version
            else
                LIB="${LIB%%:*}"
            fi

            found=""
            for dir in $(echo "${CLASSDIRS}" | tr ":" " ")
            do
                found="$(find_lib "$dir" "$LIB" "$version")"
                if [ -n "$found" ] ; then break; fi
            done

            if [ -z "$found" ]
            then
                ERROR=true
                printf "Can't find Java library \042%s\042.\n" \
                    "$LIB${version:+:$version}" > "/dev/stderr"
            else
                if [ -n "$CLASSPATH" ]
                then
                    CLASSPATH="${CLASSPATH}:"
                fi
                CLASSPATH="${CLASSPATH}$found"
            fi
            ;;

        -a*)
            LIB="${1:2}"
            if [ "$LIB" == "" ]
            then
                shift
                LIB="$1"
            fi

            version="${LIB#*:}"
            if [ "$version" == "$LIB" ] ; then
                unset version
            else
                LIB="${LIB%%:*}"
            fi

            found=""
            for dir in $(echo "${CLASSDIRS}" | tr ":" " ")
            do
                found="$(find_lib "$dir" "$LIB" "$version")"
                if [ -n "$found" ] ; then break; fi
            done

            if [ -z "$found" ]
            then
                ERROR=true
                printf "Can't find Java library \042%s\042.\n" \
                    "$LIB${version:+:$version}" > "/dev/stderr"
            else
                if [ -n "$PROCPATH" ]
                then
                    PROCPATH="${PROCPATH}:"
                fi
                PROCPATH="${PROCPATH}$found"
            fi
            ;;


        -L*)
            DIR="${1:2}"
            if [ -z "$DIR" ]
            then
                shift
                DIR="$1"
            fi
            if [ -n "$CLASSDIRS" ]
            then
                CLASSDIRS="${CLASSDIRS}:"
            fi
            CLASSDIRS="${CLASSDIRS}$DIR"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
    shift
done


if [ -z "$ERROR" ]
then
    exec "$cmd" \
        ${CLASSPATH:+-classpath "$CLASSPATH"} \
        ${PROCPATH:+-processorpath "$PROCPATH"} "$@"
else
    exit 1
fi
